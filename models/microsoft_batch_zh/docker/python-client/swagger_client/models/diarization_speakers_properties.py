# coding: utf-8

"""
    Speech Services API v3.1

    Speech Services API v3.1.  # noqa: E501

    OpenAPI spec version: v3.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class DiarizationSpeakersProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'min_count': 'int',
        'max_count': 'int'
    }

    attribute_map = {
        'min_count': 'minCount',
        'max_count': 'maxCount'
    }

    def __init__(self, min_count=None, max_count=None, _configuration=None):  # noqa: E501
        """DiarizationSpeakersProperties - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._min_count = None
        self._max_count = None
        self.discriminator = None

        if min_count is not None:
            self.min_count = min_count
        if max_count is not None:
            self.max_count = max_count

    @property
    def min_count(self):
        """Gets the min_count of this DiarizationSpeakersProperties.  # noqa: E501

        A hint for the minimum number of speakers for diarization. Must be smaller than or equal to the maxSpeakers property.  # noqa: E501

        :return: The min_count of this DiarizationSpeakersProperties.  # noqa: E501
        :rtype: int
        """
        return self._min_count

    @min_count.setter
    def min_count(self, min_count):
        """Sets the min_count of this DiarizationSpeakersProperties.

        A hint for the minimum number of speakers for diarization. Must be smaller than or equal to the maxSpeakers property.  # noqa: E501

        :param min_count: The min_count of this DiarizationSpeakersProperties.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                min_count is not None and min_count < 1):  # noqa: E501
            raise ValueError("Invalid value for `min_count`, must be a value greater than or equal to `1`")  # noqa: E501

        self._min_count = min_count

    @property
    def max_count(self):
        """Gets the max_count of this DiarizationSpeakersProperties.  # noqa: E501

        The maximum number of speakers for diarization. Must be less than 36 and larger than or equal to the minSpeakers property.  # noqa: E501

        :return: The max_count of this DiarizationSpeakersProperties.  # noqa: E501
        :rtype: int
        """
        return self._max_count

    @max_count.setter
    def max_count(self, max_count):
        """Sets the max_count of this DiarizationSpeakersProperties.

        The maximum number of speakers for diarization. Must be less than 36 and larger than or equal to the minSpeakers property.  # noqa: E501

        :param max_count: The max_count of this DiarizationSpeakersProperties.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                max_count is not None and max_count < 1):  # noqa: E501
            raise ValueError("Invalid value for `max_count`, must be a value greater than or equal to `1`")  # noqa: E501

        self._max_count = max_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DiarizationSpeakersProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiarizationSpeakersProperties):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DiarizationSpeakersProperties):
            return True

        return self.to_dict() != other.to_dict()
