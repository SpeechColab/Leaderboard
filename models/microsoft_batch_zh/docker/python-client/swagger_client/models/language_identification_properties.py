# coding: utf-8

"""
    Speech Services API v3.1

    Speech Services API v3.1.  # noqa: E501

    OpenAPI spec version: v3.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class LanguageIdentificationProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'candidate_locales': 'list[str]',
        'speech_model_mapping': 'dict(str, EntityReference)'
    }

    attribute_map = {
        'candidate_locales': 'candidateLocales',
        'speech_model_mapping': 'speechModelMapping'
    }

    def __init__(self, candidate_locales=None, speech_model_mapping=None, _configuration=None):  # noqa: E501
        """LanguageIdentificationProperties - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._candidate_locales = None
        self._speech_model_mapping = None
        self.discriminator = None

        self.candidate_locales = candidate_locales
        if speech_model_mapping is not None:
            self.speech_model_mapping = speech_model_mapping

    @property
    def candidate_locales(self):
        """Gets the candidate_locales of this LanguageIdentificationProperties.  # noqa: E501

        The candidate locales for language identification (example [\"en-US\", \"de-DE\", \"es-ES\"]). A minimum of 2 and a maximum of 10 candidate locales, including the main locale for the transcription, is supported.  # noqa: E501

        :return: The candidate_locales of this LanguageIdentificationProperties.  # noqa: E501
        :rtype: list[str]
        """
        return self._candidate_locales

    @candidate_locales.setter
    def candidate_locales(self, candidate_locales):
        """Sets the candidate_locales of this LanguageIdentificationProperties.

        The candidate locales for language identification (example [\"en-US\", \"de-DE\", \"es-ES\"]). A minimum of 2 and a maximum of 10 candidate locales, including the main locale for the transcription, is supported.  # noqa: E501

        :param candidate_locales: The candidate_locales of this LanguageIdentificationProperties.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and candidate_locales is None:
            raise ValueError("Invalid value for `candidate_locales`, must not be `None`")  # noqa: E501

        self._candidate_locales = candidate_locales

    @property
    def speech_model_mapping(self):
        """Gets the speech_model_mapping of this LanguageIdentificationProperties.  # noqa: E501

        An optional mapping of locales to speech model entities. If no model is given for a locale, the default base model is used.  Keys must be locales contained in the candidate locales, values are entities for models of the respective locales.  # noqa: E501

        :return: The speech_model_mapping of this LanguageIdentificationProperties.  # noqa: E501
        :rtype: dict(str, EntityReference)
        """
        return self._speech_model_mapping

    @speech_model_mapping.setter
    def speech_model_mapping(self, speech_model_mapping):
        """Sets the speech_model_mapping of this LanguageIdentificationProperties.

        An optional mapping of locales to speech model entities. If no model is given for a locale, the default base model is used.  Keys must be locales contained in the candidate locales, values are entities for models of the respective locales.  # noqa: E501

        :param speech_model_mapping: The speech_model_mapping of this LanguageIdentificationProperties.  # noqa: E501
        :type: dict(str, EntityReference)
        """

        self._speech_model_mapping = speech_model_mapping

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LanguageIdentificationProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LanguageIdentificationProperties):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LanguageIdentificationProperties):
            return True

        return self.to_dict() != other.to_dict()
