# coding: utf-8

"""
    Speech Services API v3.1

    Speech Services API v3.1.  # noqa: E501

    OpenAPI spec version: v3.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class CustomModelProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'custom_model_weight_percent': 'int',
        'deprecation_dates': 'CustomModelDeprecationDates',
        'features': 'CustomModelFeatures',
        'email': 'str',
        'error': 'EntityError'
    }

    attribute_map = {
        'custom_model_weight_percent': 'customModelWeightPercent',
        'deprecation_dates': 'deprecationDates',
        'features': 'features',
        'email': 'email',
        'error': 'error'
    }

    def __init__(self, custom_model_weight_percent=None, deprecation_dates=None, features=None, email=None, error=None, _configuration=None):  # noqa: E501
        """CustomModelProperties - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._custom_model_weight_percent = None
        self._deprecation_dates = None
        self._features = None
        self._email = None
        self._error = None
        self.discriminator = None

        if custom_model_weight_percent is not None:
            self.custom_model_weight_percent = custom_model_weight_percent
        if deprecation_dates is not None:
            self.deprecation_dates = deprecation_dates
        if features is not None:
            self.features = features
        if email is not None:
            self.email = email
        if error is not None:
            self.error = error

    @property
    def custom_model_weight_percent(self):
        """Gets the custom_model_weight_percent of this CustomModelProperties.  # noqa: E501

        The weight of custom model between 1 (1% custom model and 99% base model) and 100 (100% custom model and 0% base model).  When this property is not set, the service chooses a suitable value (get the model to retrieve the selected weight).  Start without using this property. If needed, choose a larger (or smaller) weight to increase (or decrease) the impact of the custom model.  # noqa: E501

        :return: The custom_model_weight_percent of this CustomModelProperties.  # noqa: E501
        :rtype: int
        """
        return self._custom_model_weight_percent

    @custom_model_weight_percent.setter
    def custom_model_weight_percent(self, custom_model_weight_percent):
        """Sets the custom_model_weight_percent of this CustomModelProperties.

        The weight of custom model between 1 (1% custom model and 99% base model) and 100 (100% custom model and 0% base model).  When this property is not set, the service chooses a suitable value (get the model to retrieve the selected weight).  Start without using this property. If needed, choose a larger (or smaller) weight to increase (or decrease) the impact of the custom model.  # noqa: E501

        :param custom_model_weight_percent: The custom_model_weight_percent of this CustomModelProperties.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                custom_model_weight_percent is not None and custom_model_weight_percent > 100):  # noqa: E501
            raise ValueError("Invalid value for `custom_model_weight_percent`, must be a value less than or equal to `100`")  # noqa: E501
        if (self._configuration.client_side_validation and
                custom_model_weight_percent is not None and custom_model_weight_percent < 1):  # noqa: E501
            raise ValueError("Invalid value for `custom_model_weight_percent`, must be a value greater than or equal to `1`")  # noqa: E501

        self._custom_model_weight_percent = custom_model_weight_percent

    @property
    def deprecation_dates(self):
        """Gets the deprecation_dates of this CustomModelProperties.  # noqa: E501


        :return: The deprecation_dates of this CustomModelProperties.  # noqa: E501
        :rtype: CustomModelDeprecationDates
        """
        return self._deprecation_dates

    @deprecation_dates.setter
    def deprecation_dates(self, deprecation_dates):
        """Sets the deprecation_dates of this CustomModelProperties.


        :param deprecation_dates: The deprecation_dates of this CustomModelProperties.  # noqa: E501
        :type: CustomModelDeprecationDates
        """

        self._deprecation_dates = deprecation_dates

    @property
    def features(self):
        """Gets the features of this CustomModelProperties.  # noqa: E501


        :return: The features of this CustomModelProperties.  # noqa: E501
        :rtype: CustomModelFeatures
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this CustomModelProperties.


        :param features: The features of this CustomModelProperties.  # noqa: E501
        :type: CustomModelFeatures
        """

        self._features = features

    @property
    def email(self):
        """Gets the email of this CustomModelProperties.  # noqa: E501

        The email address to send email notifications to in case the operation completes.  The value will be removed after successfully sending the email.  # noqa: E501

        :return: The email of this CustomModelProperties.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CustomModelProperties.

        The email address to send email notifications to in case the operation completes.  The value will be removed after successfully sending the email.  # noqa: E501

        :param email: The email of this CustomModelProperties.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def error(self):
        """Gets the error of this CustomModelProperties.  # noqa: E501


        :return: The error of this CustomModelProperties.  # noqa: E501
        :rtype: EntityError
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this CustomModelProperties.


        :param error: The error of this CustomModelProperties.  # noqa: E501
        :type: EntityError
        """

        self._error = error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomModelProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomModelProperties):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CustomModelProperties):
            return True

        return self.to_dict() != other.to_dict()
